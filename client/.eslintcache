[{"D:\\mini-chat\\client\\src\\index.js":"1","D:\\mini-chat\\client\\src\\App.js":"2","D:\\mini-chat\\client\\src\\reportWebVitals.js":"3","D:\\mini-chat\\client\\src\\routes.js":"4","D:\\mini-chat\\client\\src\\redux\\store.js":"5","D:\\mini-chat\\client\\src\\pages\\signUp.js":"6","D:\\mini-chat\\client\\src\\pages\\signIn.js":"7","D:\\mini-chat\\client\\src\\pages\\chatRoom.js":"8","D:\\mini-chat\\client\\src\\redux\\actions\\auth.js":"9","D:\\mini-chat\\client\\src\\redux\\reducers\\rootReducer.js":"10","D:\\mini-chat\\client\\src\\pages\\chat.js":"11","D:\\mini-chat\\client\\src\\redux\\types.js":"12","D:\\mini-chat\\client\\src\\redux\\actions\\room.js":"13","D:\\mini-chat\\client\\src\\service\\api.js":"14","D:\\mini-chat\\client\\src\\redux\\reducers\\auth.js":"15","D:\\mini-chat\\client\\src\\redux\\reducers\\room.js":"16","D:\\mini-chat\\client\\src\\config\\config.js":"17","D:\\mini-chat\\client\\src\\components\\navBar.js":"18","D:\\mini-chat\\client\\src\\components\\chatList.js":"19","D:\\mini-chat\\client\\src\\pages\\appWindow.js":"20","D:\\mini-chat\\client\\src\\redux\\reducers\\messages.js":"21","D:\\mini-chat\\client\\src\\redux\\actions\\messages.js":"22","D:\\mini-chat\\client\\src\\components\\loader.js":"23"},{"size":500,"mtime":1611229961193,"results":"24","hashOfConfig":"25"},{"size":452,"mtime":1612388118777,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1611229961193,"results":"27","hashOfConfig":"25"},{"size":1183,"mtime":1612383903711,"results":"28","hashOfConfig":"25"},{"size":736,"mtime":1612181697463,"results":"29","hashOfConfig":"25"},{"size":4067,"mtime":1612124691571,"results":"30","hashOfConfig":"25"},{"size":3360,"mtime":1612127219866,"results":"31","hashOfConfig":"25"},{"size":1159,"mtime":1612383471761,"results":"32","hashOfConfig":"25"},{"size":1145,"mtime":1612180638186,"results":"33","hashOfConfig":"25"},{"size":287,"mtime":1612480220448,"results":"34","hashOfConfig":"25"},{"size":5224,"mtime":1613506137019,"results":"35","hashOfConfig":"25"},{"size":359,"mtime":1613504987674,"results":"36","hashOfConfig":"25"},{"size":782,"mtime":1612430215254,"results":"37","hashOfConfig":"25"},{"size":2162,"mtime":1612180169533,"results":"38","hashOfConfig":"25"},{"size":1638,"mtime":1612450864947,"results":"39","hashOfConfig":"25"},{"size":722,"mtime":1612430365256,"results":"40","hashOfConfig":"25"},{"size":187,"mtime":1612124860424,"results":"41","hashOfConfig":"25"},{"size":1778,"mtime":1612372165410,"results":"42","hashOfConfig":"25"},{"size":2197,"mtime":1612872492914,"results":"43","hashOfConfig":"25"},{"size":644,"mtime":1612389860311,"results":"44","hashOfConfig":"25"},{"size":1112,"mtime":1613505835413,"results":"45","hashOfConfig":"25"},{"size":1096,"mtime":1613505835398,"results":"46","hashOfConfig":"25"},{"size":186,"mtime":1612620308913,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"zw8to",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"D:\\mini-chat\\client\\src\\index.js",[],["102","103"],"D:\\mini-chat\\client\\src\\App.js",[],"D:\\mini-chat\\client\\src\\reportWebVitals.js",[],"D:\\mini-chat\\client\\src\\routes.js",["104","105"],"import React from 'react'\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport {SignUp} from \"./pages/signUp\";\r\nimport {SignIn} from \"./pages/signIn\";\r\nimport {Chat} from \"./pages/chat\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppWindow} from \"./pages/appWindow\";\r\nimport {ChatRoom} from \"./pages/chatRoom\";\r\n\r\n\r\nexport const UseRoutes = () =>{\r\n    const {isLogged} = useSelector(state=>state.auth)\r\n    if (isLogged) {\r\n        return (\r\n            <>\r\n                <Switch>\r\n                    <Route path='/userWindow'>\r\n                        <AppWindow/>\r\n                    </Route>\r\n                </Switch>\r\n                <Redirect to='userWindow'>\r\n                    <AppWindow/>\r\n                </Redirect>\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route path=\"/signUp\" exact>\r\n                    <SignUp/>\r\n                </Route>\r\n                <Route path=\"/signIn\" exact>\r\n                    <SignIn/>\r\n                </Route>\r\n            </Switch>\r\n            <Redirect to=\"/signUp\">\r\n                <SignUp/>\r\n            </Redirect>\r\n        </>\r\n    )\r\n\r\n}\r\n","D:\\mini-chat\\client\\src\\redux\\store.js",[],"D:\\mini-chat\\client\\src\\pages\\signUp.js",[],"D:\\mini-chat\\client\\src\\pages\\signIn.js",[],"D:\\mini-chat\\client\\src\\pages\\chatRoom.js",["106","107"],"import React, {useState} from 'react'\r\nimport moment from \"moment\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {enterRoom} from \"../redux/actions/room\";\r\nimport {Chat} from \"./chat\";\r\nimport {ChatList} from \"../components/chatList\";\r\n\r\nexport const ChatRoom = () => {\r\n    const dispatch = useDispatch()\r\n    const {userId} = useSelector(state=>state.auth)\r\n    const [room, setRoom]= useState('')\r\n    const changeHandler = event => {\r\n        setRoom(event.target.name= event.target.value )\r\n    }\r\n    const submitRoom = ()=>{\r\n        let lastUpdate=moment()\r\n        dispatch(enterRoom(userId,room,lastUpdate))\r\n    }\r\n    return(\r\n        <>\r\n        <div className=\"row\">\r\n        <div className=\"input-field col s6\">\r\n            <input value={room}\r\n                   type=\"text\"\r\n                   name='room'\r\n                onChange={changeHandler}\r\n            />\r\n                <label className=\"active\">Create Room</label>\r\n                <button\r\n                    onClick={submitRoom}\r\n                >\r\n                    Enter\r\n                </button>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","D:\\mini-chat\\client\\src\\redux\\actions\\auth.js",[],"D:\\mini-chat\\client\\src\\redux\\reducers\\rootReducer.js",[],"D:\\mini-chat\\client\\src\\pages\\chat.js",["108","109"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport moment from \"moment\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport {getAllMessages, resetConvers} from \"../redux/actions/messages\"\r\nimport './chat.style.css'\r\nimport {Loading} from \"../components/loader\";\r\n\r\nconst ENDPOINT = \"ws://127.0.0.1:5000\";\r\nlet socket;\r\n\r\nexport const Chat = () => {\r\n    const {userId, name} = useSelector(state => state.auth)\r\n    const {roomId} = useSelector(state => state.room)\r\n    const {totalPages, currentPage, totalMessages, isLoading} = useSelector(state => state.message)\r\n    const [message, setMessage] = useState('')\r\n    const [page, setPage] = useState(1)\r\n    const [data, setData] = useState([])\r\n    const ref = useRef()\r\n    const dispatch = useDispatch()\r\n\r\n    const changeHandler = event => {\r\n        setMessage(event.target.name = event.target.value)\r\n    }\r\n    useEffect(() => {\r\n        ref.current = roomId\r\n        dispatch(resetConvers())\r\n        setPage(1)\r\n    }, [roomId])\r\n    useEffect(() => {\r\n        socket = socketIOClient(ENDPOINT, {query: {roomId}});\r\n        socket.on('sentMessage', m => {\r\n            console.log(m)\r\n            setData(prev => prev.concat({...m}))\r\n        })\r\n        return () => {\r\n            console.log('disconnect')\r\n            setData([])\r\n            socket.disconnect()\r\n        }\r\n    }, [roomId])\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (ref.current !== roomId) {\r\n                await setPage(1)\r\n                await dispatch(resetConvers())\r\n                await dispatch(getAllMessages(roomId, page))\r\n                ref.current = roomId\r\n            } else {\r\n                dispatch(getAllMessages(roomId, page))\r\n            }\r\n        })()\r\n    }, [roomId, page])\r\n\r\n    const onClick = () => {\r\n        let nowTime = moment()\r\n        const payload = {\r\n            message: message,\r\n            userId,\r\n            roomId,\r\n            nowTime,\r\n            name\r\n        }\r\n        console.log('numele la onclick', name)\r\n        setData(prev => prev.concat({...payload}))\r\n        socket.emit('sendMessage', {...payload})\r\n        setMessage('')\r\n    }\r\n\r\n    const handleEnter = e => {\r\n        if (e.key === 'Enter') {\r\n            onClick()\r\n        }\r\n    }\r\n\r\n    const handleScroll = () => {\r\n        if (!isLoading)\r\n            setPage(page + 1)\r\n    }\r\n\r\n    return (\r\n        <div className='window'>\r\n            {/*scroll start*/}\r\n            <div\r\n                id=\"scrollableDiv\"\r\n                style={{\r\n                    height: 380,\r\n                    overflow: 'auto',\r\n                    display: 'flex',\r\n                    flexDirection: 'column-reverse',\r\n                }}\r\n            >\r\n                {/*Put the scroll bar always on the bottom*/}\r\n                <InfiniteScroll\r\n                    dataLength={totalMessages.length}\r\n                    next={handleScroll}\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column-reverse'\r\n                    }} //To put endMessage and loader to the top.\r\n                    inverse={true} //\r\n                    endMessage={<h5>Gata mai</h5>}\r\n                    hasMore={!(totalPages === currentPage)}\r\n                    loader={<Loading/>}\r\n                    scrollableTarget=\"scrollableDiv\"\r\n                >\r\n                    {/*<div className='message-order'>*/}\r\n                    <div className='instant-message'>\r\n                        {\r\n                            data.map((instantMessage, index) => (\r\n                                <div key={index}>\r\n                                    <div>{instantMessage.name}</div>\r\n                                    <div key={index.toString()} className='message-bubble'>\r\n                                        <div className='bubble'>{instantMessage.message}</div>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    {totalMessages.map((mesaj, index) => (\r\n                        <div key={index}>\r\n                            <div>{mesaj.name}</div>\r\n                            <div key={index.toString()} className='message-bubble'>\r\n                                <div className='bubble'>{mesaj.message}</div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                    {/*</div>*/}\r\n                </InfiniteScroll>\r\n            </div>\r\n            {/*scroll end*/}\r\n            <div className='message-input'>\r\n                <input placeholder=\"Enter Message\" type=\"text\" name=\"message\" value={message}\r\n                       onChange={changeHandler}\r\n                       onKeyPress={handleEnter}\r\n                />\r\n                <button className=\"waves-effect waves-light btn\"\r\n                        onClick={onClick}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\mini-chat\\client\\src\\redux\\types.js",[],"D:\\mini-chat\\client\\src\\redux\\actions\\room.js",[],"D:\\mini-chat\\client\\src\\service\\api.js",["110"],"import axios from 'axios'\r\nimport Config from \"../config/config\";\r\nimport {store} from \"../redux/store\";\r\n\r\n\r\nconst apiClient = axios.create({\r\n    baseURL : Config.apiUrl,\r\n    headers: {\r\n        Accept : \"application/json\",\r\n        \"Content-Type\" : \"application/json\",\r\n    }\r\n})\r\n\r\napiClient.interceptors.request.use(\r\n    config => {\r\n        const authReducer = store.getState().auth;\r\n        const {token} = authReducer;\r\n        if(token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        Promise.reject(error);\r\n    }\r\n)\r\n\r\napiClient.interceptors.request.use(\r\n    response => successHandler(response),\r\n    err => errorHandler(err)\r\n)\r\n\r\nexport default {\r\n    get(path,params) {\r\n        return apiClient.get(`/${path}`,params)\r\n            .then(response=>response.data);\r\n    },\r\n    getWithBody(path,body){\r\n        return apiClient.get(`/${path}`,{params : body})\r\n            .then(response=>response.data)\r\n    },\r\n    post(path,body) {\r\n        return apiClient.post(`/${path}`,body,{\r\n            headers: {\r\n                \"Content-Type\" : \"application/json\",\r\n            }\r\n        })\r\n    },\r\n    postFormData(path,body){\r\n        return apiClient.post(`/${path}`,body,{\r\n            headers : {\r\n                'Content-Type' : 'multipart/form-data',\r\n                \"X-Requested-With\": \"XMLHttpRequest\"\r\n            }\r\n        })\r\n    },\r\n    put(path,body){\r\n        return apiClient.put(`/${path}`,body);\r\n    },\r\n    delete(path){\r\n        return apiClient.delete(`/${path}`);\r\n    },\r\n    deleteWithBody(path,body){\r\n        return apiClient.delete(`/${path}`,{\r\n            headers: {\r\n                'Content-Type' : 'multipart/form-data',\r\n                \"X-Requested-With\": \"XMLHttpRequest\"\r\n            },\r\n            data: {\r\n                productId : body\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst errorHandler = (err) => {\r\n    // if (err.response && err.response.status === 401) store.dispatch('authentication/logout');\r\n    return Promise.reject(err);\r\n};\r\n\r\nconst successHandler = (response) => {\r\n    return response;\r\n};\r\n","D:\\mini-chat\\client\\src\\redux\\reducers\\auth.js",[],"D:\\mini-chat\\client\\src\\redux\\reducers\\room.js",[],"D:\\mini-chat\\client\\src\\config\\config.js",[],["111","112"],"D:\\mini-chat\\client\\src\\components\\navBar.js",[],"D:\\mini-chat\\client\\src\\components\\chatList.js",["113","114"],"import React, {useEffect} from 'react'\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {allRooms, enterRoom} from \"../redux/actions/room\";\r\nimport moment from \"moment\";\r\nimport './chatList.style.css'\r\nimport {getAllMessages} from \"../redux/actions/messages\";\r\n\r\nexport const  ChatList =() => {\r\n    const dispatch = useDispatch()\r\n    const {rooms, roomId} = useSelector(state => state.room)\r\n    const {userId, name} = useSelector(state => state.auth)\r\n    useEffect( ()=>{\r\n        dispatch(allRooms())\r\n    },[dispatch])\r\n    const handleClick = room=>{\r\n        let lastUpdate= moment()\r\n        console.log('aici user',userId)\r\n        dispatch(enterRoom(userId,room,lastUpdate))\r\n    }\r\n    return(\r\n        <div className='main'>\r\n            <ul className=\"main collection with-header\">\r\n                <li className=\"collection-header\">\r\n                    <div\r\n                        style={{\r\n                            marginLeft: '20px'\r\n                        }}\r\n                    >\r\n                        <h6>{name}</h6>\r\n                    </div>\r\n                    <div className='list-header'>\r\n                        <div>\r\n                            <h4>Chats</h4>\r\n                        </div>\r\n                        <div className='header-button'>\r\n                            <button className='btn-floating btn-medium waves-effect waves-light green'>\r\n                                Add\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                {rooms.length ?  rooms.map(room =>\r\n                    <div className='button-list-container' key={room._id.toString()}>\r\n                    <button className='button-list'\r\n                            key={room._id.toString()}\r\n                            // id={room._id.toString()}\r\n                            onClick={e =>handleClick(room.name)}\r\n                    >\r\n                    {room.name}\r\n                    </button>\r\n                    </div>\r\n\r\n                )\r\n                :\r\n                    <h6>No chats</h6>\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","D:\\mini-chat\\client\\src\\pages\\appWindow.js",[],"D:\\mini-chat\\client\\src\\redux\\reducers\\messages.js",[],"D:\\mini-chat\\client\\src\\redux\\actions\\messages.js",["115"],"import {GET_ALL_MESSAGES, RESET_MESSAGES, SET_IS_LOADING} from \"../types\";\r\nimport ApiService from \"../../service/api\";\r\n\r\nexport function getAllMessages(roomId, page) {\r\n    return async dispatch => {\r\n        const scroll = {\r\n            roomId,\r\n            page\r\n        }\r\n        try {\r\n            dispatch({\r\n                type: SET_IS_LOADING,\r\n                payload: true\r\n            })\r\n            const response = await ApiService.get(`messages/allMessages?scroll=${JSON.stringify(scroll)}`, {})\r\n            dispatch({\r\n                type: GET_ALL_MESSAGES,\r\n                payload: response,\r\n            })\r\n\r\n        } catch (e) {\r\n            console.log('get all messages error', e)\r\n        }\r\n        finally {\r\n            dispatch(\r\n                {\r\n                    type: SET_IS_LOADING,\r\n                    payload: false\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetConvers() {\r\n    return async dispatch => {\r\n        dispatch({\r\n            type: RESET_MESSAGES,\r\n            payload: undefined,\r\n        })\r\n    }\r\n}\r\n","D:\\mini-chat\\client\\src\\components\\loader.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":5,"column":9,"nodeType":"122","messageId":"123","endLine":5,"endColumn":13},{"ruleId":"120","severity":1,"message":"124","line":8,"column":9,"nodeType":"122","messageId":"123","endLine":8,"endColumn":17},{"ruleId":"120","severity":1,"message":"121","line":5,"column":9,"nodeType":"122","messageId":"123","endLine":5,"endColumn":13},{"ruleId":"120","severity":1,"message":"125","line":6,"column":9,"nodeType":"122","messageId":"123","endLine":6,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":30,"column":8,"nodeType":"128","endLine":30,"endColumn":16,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"127","line":54,"column":8,"nodeType":"128","endLine":54,"endColumn":22,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":33,"column":1,"nodeType":"133","endLine":74,"endColumn":2},{"ruleId":"116","replacedBy":"134"},{"ruleId":"118","replacedBy":"135"},{"ruleId":"120","severity":1,"message":"136","line":6,"column":9,"nodeType":"122","messageId":"123","endLine":6,"endColumn":23},{"ruleId":"120","severity":1,"message":"137","line":10,"column":19,"nodeType":"122","messageId":"123","endLine":10,"endColumn":25},{"ruleId":"120","severity":1,"message":"138","line":1,"column":43,"nodeType":"122","messageId":"123","endLine":1,"endColumn":57},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Chat' is defined but never used.","Identifier","unusedVar","'ChatRoom' is defined but never used.","'ChatList' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["141"],["142"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["139"],["140"],"'getAllMessages' is defined but never used.","'roomId' is assigned a value but never used.","'SET_IS_LOADING' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [dispatch, roomId]",{"range":"147","text":"148"},"Update the dependencies array to be: [roomId, page, dispatch]",{"range":"149","text":"150"},[1118,1126],"[dispatch, roomId]",[1882,1896],"[roomId, page, dispatch]"]